@{
    ViewData["Title"] = "Home Page";
}
<div class="d-flex flex-row">
    <div class="col-md-8">
        <div class="text-center">
            <h1 class="display-4 text-primary">Play</h1>
            <p> A multiplayer chess webapp built with asp.net MVC, chessboardjs, and SignalR</p>
        </div>
        <div class="container">
            <div class="mx-auto" id="myBoard" style="width: 50%"></div>
            <label>Status:</label>
            <div id="status"></div>
            <label>FEN:</label>
            <div id="fen"></div>
            <label>PGN:</label>
            <div id="pgn"></div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="text-center">
            <h1 class="display-4 text-primary">Message</h1>
            <p>Message your opponent in real time</p>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-2">User</div>
            <div class="col-4"><input type="text" id="userInput" /></div>
        </div>
        <div class="row">
            <div class="col-2">Message</div>
            <div class="col-4"><input type="text" id="messageInput" /></div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-6">
                <input type="button" id="sendButton" value="Send Message" />
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <ul id="messagesList"></ul>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <!-- chessboardjs script -->
    <script src="~/chessboardjs/js/chess.js"></script>

    <!-- signalr script -->
    <script src="~/js/signalr/dist/browser/signalr.js"></script>

    <!-- page script (TODO: eventually move this to a separate JS file) -->
    <script>
        /* SECTION: signalr connection for instant messaging */

        "use strict";

        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        //Disable the send button until connection is established.
        document.getElementById("sendButton").disabled = true;

        connection.on("ReceiveMessage", function (user, message) {
            var li = document.createElement("li");
            document.getElementById("messagesList").appendChild(li);
            // We can assign user-supplied strings to an element's textContent because it
            // is not interpreted as markup. If you're assigning in any other way, you
            // should be aware of possible script injection concerns.
            li.textContent = `${user} says ${message}`;
        });

        connection.start().then(function () {
            document.getElementById("sendButton").disabled = false;
        }).catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("sendButton").addEventListener("click", function (event) {
            var user = document.getElementById("userInput").value;
            var message = document.getElementById("messageInput").value;
            connection.invoke("SendMessage", user, message).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });

        /* SECTION: signalr connection for chess game communication */

        // Function for sending new position to opponent from the new FEN string
        function sendMove(fenString) {
            connection.invoke("SendMove", fenString).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        }

        // Update board position with FEN string received from opponent
        connection.on("ReceiveMove", function (fenString) {
            // Update board position
            board.position(fenString);

            // Update game turn
            game.load(fenString);

            // Update game status elements
            updateStatus()
        });


        /* SECTION: chessboardjs & chess.js configuration */

        // Integration of chess.js API to only allow legal moves:
        var board = null
        var game = new Chess()
        var $status = $('#status')
        var $fen = $('#fen')
        var $pgn = $('#pgn')

        // Fires when a piece is picked up. The drag action is prevented if the function returns false
        function onDragStart(source, piece, position, orientation) {
            // do not pick up pieces if the game is over
            if (game.game_over()) return false

            // only pick up pieces for the side to move
            if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||
                (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
                return false
            }
        }

        function onDrop(source, target) {
            // see if the move is legal
            var move = game.move({
                from: source,
                to: target,
                promotion: 'q' // NOTE: always promote to a queen for example simplicity
            })

            // illegal move
            if (move === null) return 'snapback'

            updateStatus()

            // Send move to opponent's board
            sendMove(game.fen())
        }

        // update the board position after the piece snap
        // for castling, en passant, pawn promotion
        function onSnapEnd() {
            board.position(game.fen())
        }

        function updateStatus() {
            var status = ''

            var moveColor = 'White'
            if (game.turn() === 'b') {
                moveColor = 'Black'
            }

            // checkmate?
            if (game.in_checkmate()) {
                status = 'Game over, ' + moveColor + ' is in checkmate.'
            }

            // draw?
            else if (game.in_draw()) {
                status = 'Game over, drawn position'
            }

            // game still on
            else {
                status = moveColor + ' to move'

                // check?
                if (game.in_check()) {
                    status += ', ' + moveColor + ' is in check'
                }
            }

            $status.html(status)
            $fen.html(game.fen())
            $pgn.html(game.pgn())
        }

        var config = {
            draggable: true,
            position: 'start',
            onDragStart: onDragStart,
            onDrop: onDrop,
            onSnapEnd: onSnapEnd
        }
        board = Chessboard('myBoard', config)

        updateStatus()
    </script>
}



