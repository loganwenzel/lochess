@using Microsoft.AspNetCore.Identity

@inject SignInManager<AspNetUser> SignInManager
@inject UserManager<AspNetUser> UserManager
<div class="row text-center">
    <h1 class="display-4 text-primary">Play</h1>
</div>
<div class="d-flex flex-row">
    <div class="col-md-2">
        <div class="text-center">
            <h6>Status</h6>
        </div>
        <div class="container-fluid border border-primary rounded" id="dashboardContainer">
            <div class="row border-bottom border-primary" style="height: 20%;">
                <p id="opponentUserName"></p>
            </div>
            <div class="row border-bottom border-primary" style="height: 30%;"></div>
            <div class="row border-bottom border-primary" style="height: 30%;"></div>
            <div class="row" style="height: 20%;">
                <p id="playerUserName"></p>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div class="text-center">
            <h6> A multiplayer chess webapp built with ASP.NET MVC, chessboardjs, and SignalR</h6>
        </div>
        <div class="mx-auto" id="myBoard" style="width: 50%"></div>
        <div class="text-center my-3">
            <span class="btn btn-danger mx-auto" data-bs-toggle="modal" data-bs-target="#resignModal" id="resignButton">Resign</span>
            <span class="btn btn-primary mx-auto d-none" data-bs-toggle="modal" data-bs-target="#rematchModal" id="rematchButton">Rematch</span>
        </div>
    </div>
    <div class="col-md-2">
        <div class="text-center">
            <h6>Message</h6>
        </div>
        <div class="container-fluid overflow-auto border border-primary rounded" id="messagesContainer">
            <div class="row mx-2">
                <div class="col pt-1">
                    <input class="form-control" type="text" id="messageInput"/>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <ul id="messagesList"></ul>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- SECTION: Modals -->
<!-- Game Over Modal -->
<div class="modal fade" id="gameOverModal" tabindex="-1" role="dialog" aria-labelledby="gameOverModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title mx-auto" id="gameOverModalHeader"></h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Resign Confirmation Modal -->
<div class="modal fade" id="resignModal" tabindex="-1" role="dialog" aria-labelledby="resignModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title mx-auto" id="resignModalHeader">Are you sure you want to resign?</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">No</button>
                <input type="submit" id="resignConfirmation" class="btn btn-danger" value="Yes" data-bs-dismiss="modal"/>
            </div>
        </div>
    </div>
</div>

<!-- Rematch Confirmation Modal -->
<div class="modal fade" id="rematchModal" tabindex="-1" role="dialog" aria-labelledby="rematchModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mx-auto" id="rematchModalHeader">Submit Rematch Request?</h5>
            </div>
            <form asp-controller="Game" asp-action="Play" method="post">
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">No</button>

                    <input type="hidden" id="rematchInput" name="opponentUserName">
                    <input type="submit" class="btn btn-primary" value="Yes" data-bs-dismiss="modal"  />
                </div>
            </form>
        </div>
    </div>
</div>

@section scripts {
    <!-- chessboardjs script -->
    <script src="~/chessboardjs/js/chess.js"></script>

    <!-- signalr script -->
    <script src="~/js/signalr/dist/browser/signalr.js"></script>

    <!-- page script (TODO: eventually move this to a separate JS file) -->
    <script>
        "use strict";

        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        /* SECTION: signalr connection for instant messaging */

        // Start the connection - runs on page load
        connection.start().then(function () {
            // Only run the CreateGroup() function if this is the invite sender's page
            if ('@(ViewBag.opponentUserName)' != ''){
                connection.invoke("CreateGroup", '@(ViewBag.opponentUserName)').catch(function (err) {
                    return console.error(err.toString());
                });
            }
            else{
                connection.invoke("JoinGroup", '@(ViewBag.groupName)').catch(function (err) {
                    return console.error(err.toString());
                });
            }
        }).catch(function (err) {
            return console.error(err.toString());
        });

        // Receive Message
        connection.on("ReceiveMessage", function (sender, message) {
            var li = document.createElement("li");
            document.getElementById("messagesList").appendChild(li);
            // We can assign user-supplied strings to an element's textContent because it
            // is not interpreted as markup. If you're assigning in any other way, you
            // should be aware of possible script injection concerns.
            li.textContent = `${sender} says ${message}`;
        });

        // Send Message Button
        document.getElementById("messageInput").addEventListener("keyup", function (event) {
            // 13 = 'enter' on the keyboard
            if (event.keyCode === 13) {
                var message = document.getElementById("messageInput").value;
                connection.invoke("SendMessage", message).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();

                // Clear input value upon sending
                document.getElementById("messageInput").value = ''
            }
        });

        // Resign Button
        document.getElementById("resignConfirmation").addEventListener("click", function (event) {
            connection.invoke("LeaveGame", '@(UserManager.GetUserName(User))', game.pgn()).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });

        // Open Game Over modal
        connection.on("MatchLeft", function (leaverUserName){
            if ('@(UserManager.GetUserName(User))' === leaverUserName) {
                document.getElementById("gameOverModalHeader").innerText = "You lose";
                document.getElementById("gameOverModalHeader").classList.add("text-danger");
                document.getElementById("gameOverModal").classList.add("bg-danger");
            }
            else{
                document.getElementById("gameOverModalHeader").innerText = "You win";
                document.getElementById("gameOverModalHeader").classList.add("text-success");
                document.getElementById("gameOverModal").classList.add("bg-success");
            }
            $('#gameOverModal').modal('show');

            // gameOver = true means pieces are no longer draggable
            gameOver = true;

            // Swap resign button with rematch button
            document.getElementById("resignButton").classList.add("d-none");
            document.getElementById("rematchButton").classList.remove("d-none");

            // Populate input value of rematch button with opponent's username
            document.getElementById("rematchInput").value = opponentUserName;
        });

        // Receiving invite for a rematch should refresh the page
        connection.on("ReceiveInvite", function () {
            window.location.href = '@(Url.Action("Play", "Game"))';
        });


        /* SECTION: signalr connection for chess game communication */

        // Function for sending new position to opponent from the new FEN string
        function sendMove(source, target) {
            connection.invoke("SendMove", source, target).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        }

        // Update board position with FEN string received from opponent
        connection.on("ReceiveMove", function (source, target) {
            // Update board position

            var move = game.move({
                from: source,
                to: target,
                promotion: 'q' // NOTE: always promote to a queen for example simplicity
            })

            game.move(move);

            board.position(game.fen());

            // Update game turn

            // Update game status elements
            updateStatus()
        });


        /* SECTION: chessboardjs & chess.js configuration */

        // Integration of chess.js API to only allow legal moves:
        var board = null
        var game = new Chess()
        var $status = $('#status')
        var $fen = $('#fen')
        var $pgn = $('#pgn')

        var whiteUserName = '';
        var blackUserName = '';
        var opponentUserName = '';
        var playerUserName = '';

        var gameOver = false;

        var config = {
            draggable: true,
            position: 'start',
            onDragStart: onDragStart,
            onDrop: onDrop,
            onSnapEnd: onSnapEnd,
        }
        board = Chessboard('myBoard', config)

        // Set chessboard size to be dynamic
        $(window).resize(board.resize)
        
        // Set the height on page load
        updateNeighbouringHeights();

        // Function for ensuring that the Dashboard and Messages height always matches the Chessboard's
        function updateNeighbouringHeights() {
            var boardHeight = $('#myBoard').height();
            $('#dashboardContainer').height(boardHeight);
            $('#messagesContainer').height(boardHeight);
        }

        // General function for orienting the page once a game starts
        connection.on("GameStart", function (BlackUserName, WhiteUserName) {
            // Setting variables at the start of the game so who is white/black is stored in memory
            whiteUserName = WhiteUserName;
            blackUserName = BlackUserName;

            // Flip the orientation for player with black and set global user variables
            if ('@(UserManager.GetUserName(User))' === blackUserName){
                board.orientation('black');
                opponentUserName = whiteUserName;
                playerUserName = blackUserName;
            }
            else
            {
                opponentUserName = blackUserName;
                playerUserName = whiteUserName;
            }

            document.getElementById("opponentUserName").innerText = opponentUserName;
            document.getElementById("playerUserName").innerText = playerUserName;
        });

        // Fires when a piece is picked up. The drag action is prevented if the function returns false
        function onDragStart(source, piece, position, orientation) {
            // do not pick up pieces if the game is over
            if (game.game_over()) return false

            // Only allow player to pick up their own pieces
            if ('@(UserManager.GetUserName(User))' === blackUserName) {
                if (piece.search(/^w/) !== -1) return false
            }
            else {
                if (piece.search(/^b/) !== -1) return false
            }
        }

        function onDrop(source, target) {
            if (!gameOver)
            {
                // see if the move is legal
                var move = game.move({
                    from: source,
                    to: target,
                    promotion: 'q' // NOTE: always promote to a queen for example simplicity
                })

                // illegal move
                if (move === null) return 'snapback'

                updateStatus()
                // Send move to opponent's board
                //var moveString = source + '-' + target
                sendMove(source, target)
            }
            else
            {
                return 'snapback'
            }
        }

        // update the board position after the piece snap
        // for castling, en passant, pawn promotion
        function onSnapEnd() {
            board.position(game.fen())
        }

        // General function for keeping track of the status of the game. Currenly not utilized, but can be very useful for position tracking, etc
        function updateStatus() {
            var status = ''

            var moveColor = 'white'
            var previousMoveColor = 'black'
            if (game.turn() === 'b') {
                moveColor = 'black'
                previousMoveColor = 'white'
            }

            // checkmate?
            if (game.in_checkmate()) {
                status = 'Game over, ' + moveColor + ' is in checkmate.'

                var result = 'checkmate'
                var winnerColour = previousMoveColor
                var pgn = game.pgn()
                connection.invoke("GameOver", result, winnerColour, pgn).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            }

            // draw?
            else if (game.in_draw()) {
                status = 'Game over, drawn position'

                var result = 'draw'
                var winnerColour = ''
                var pgn = game.pgn()
                connection.invoke("GameOver", result, winnerColour, pgn).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            }

            // game still on
            else {
                status = moveColor + ' to move'

                // check?
                if (game.in_check()) {
                    status += ', ' + moveColor + ' is in check'
                }
            }

            $status.html(status)
            $fen.html(game.fen())
            $pgn.html(game.pgn())
        }

        updateStatus()

        // Update the Dashboard and Messages heights to match the chessboard height when the window is resized
        $(window).resize(function () {
            updateNeighbouringHeights();
        });

        // Before unload handling when game is on:
        window.addEventListener('beforeunload', function (e) {
            if (!gameOver)
            {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        // Remove both user's from game when one player unloads the page
        window.addEventListener('unload', function (e) {
            connection.invoke("LeaveGame", '@(UserManager.GetUserName(User))', game.pgn()).catch(function (err) {
                return console.error(err.toString());
            });
            e.preventDefault();
        });
    </script>
}



